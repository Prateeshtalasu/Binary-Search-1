// Time Complexity : O(logn)
// Space Complexity : O(1)                      
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// our code here along with comments explaining our approach in three sentences only   we are using binary search to search in unknown sorted array and we are using two pointers to find the range of the target
// search in unknown sorted array

class ArrayReader {
    int [] arr;
    public ArrayReader(int [] arr){
        this.arr=arr
    }


    public int get(int index){
        if (index>= arr.length) return Integer.MAX_VALUE;
        return arr[index];
    }
}

public class searchunsorted {
public int search(ArrayReader reader, int target){
    int low =0;
    int high =1;
    while(reader.get(high)<target){
        low =high;
        high = high*2;    }
        while(low<=high){
            int mid = low + (high-low)/2;
            if(reader.get(mid)==target){
                return mid;
      }
      else if(reader.get(mid)<target){
        low = mid+1

        }
        else{
            high = mid -1
        }
        return -1;

}


///////////////////////////////////////////////////////////////////////////////
/// //time complexity is O(log(m*n))
/// //space complexity is O(1)          
/// //did this code successfully run on leetcode : yes
/// //any problem you faced while coding this : no
/// //our approach is to treat the 2d matrix as a 1d array and apply binary search on it
/// Search in a 2D matrix

class Solution {
    public boolean searchMatrix(int[][] matrix, int target){
        if (matrix == null || matrix.length ==0) return false;
        int rows = matrix.length;
    int cols = matrix[0].length;
    int low = 0;
    int high = rows*cols - 1;
    while (low <=high){
    int mid = low + (high-low)/2;
    int row = mid/cols;
    int col = mid%cols;
    int midval = matrix[row][col];
    if (midval == target){
        return true;
    }
    else if (midval<target){
        low = mid+1;
            }   
    else{
        high = mid-1;
    }
    return false;

    }


}



///////////////////////////////////////////////////////////////////////////////
/// search in rotated sorted array
/// //time complexity is O(logn)
/// //space complexity is O(1)
/// //did this code successfully run on leetcode : yes
/// //any problem you faced while coding this : no
/// //our approach is to find the pivot point and then apply binary search on the left or right side of the pivot
///     
class Solution {
    public int search(int[] nums, int target) {
        if(nums==null || nums.length==0){ return -1; 
        }

        int low =0;
        int high = nums.length-1;
        while (low <= high){
            int mid = low + (high - low)/2;
            if (nums[mid]== target){
                return mid;
            }
            if ( nums[low]<= nums [mid]){
                if (target >= nums[low] && target < nums[mid]){
                    high = mid -1;
                }
                else { low = mid +1 ;
                }
            }
            else {
                if (target > nums[mid] && target <=nums[high]){
                    low= mid+1;
                }
                else { high = mid -1 ;}
            }






        }
return -1;
    }
}